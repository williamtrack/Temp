public class MainActivity extends AppCompatActivity {
    private final String TAG="abc";
    private int recBufSize, playBufSize;//采集缓冲区的大小，播放缓冲区的大小
    private static final int sampleRateInHz = 44100;//采样率
    private static final int channelInConfig = AudioFormat.CHANNEL_IN_MONO;//采集通道数
    private static final int channelOutConfig = AudioFormat.CHANNEL_OUT_MONO;//播放通道数
    private static final int audioFormat = AudioFormat.ENCODING_PCM_16BIT;//位数

    private AudioRecord mAudioRecord;
    private AudioTrack mAudioTrack;

    private boolean isRecording;//采集状态
    RecordThread recordThread;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        recBufSize = AudioRecord.getMinBufferSize(sampleRateInHz, channelInConfig, audioFormat);
        playBufSize = AudioTrack.getMinBufferSize(sampleRateInHz, channelOutConfig, audioFormat);

        mAudioRecord = new AudioRecord(MediaRecorder.AudioSource.MIC,
                sampleRateInHz, channelInConfig, audioFormat, recBufSize);

        mAudioTrack = new AudioTrack(AudioManager.STREAM_MUSIC,
                sampleRateInHz, channelOutConfig, audioFormat, playBufSize, AudioTrack.MODE_STREAM);

        checkPermission();
        new RecordThread().run();
    }

    public void checkPermission()
    {
        int targetSdkVersion = 0;
        String[] PermissionString={Manifest.permission.READ_EXTERNAL_STORAGE,
                Manifest.permission.RECORD_AUDIO};
        try {
            final PackageInfo info = this.getPackageManager().getPackageInfo(this.getPackageName(), 0);
            targetSdkVersion = info.applicationInfo.targetSdkVersion;//获取应用的Target版本
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
//            Log.e("err", "检查权限_err0");
        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            //Build.VERSION.SDK_INT是获取当前手机版本 Build.VERSION_CODES.M为6.0系统
            //如果系统>=6.0
            if (targetSdkVersion >= Build.VERSION_CODES.M) {
                //第 1 步: 检查是否有相应的权限
                boolean isAllGranted = checkPermissionAllGranted(PermissionString);
                if (isAllGranted) {
                    //Log.e("err","所有权限已经授权！");
                    return;
                }
                // 一次请求多个权限, 如果其他有权限是已经授予的将会自动忽略掉
                ActivityCompat.requestPermissions(this,
                        PermissionString, 1);
            }
        }
    }

    /**
     * 检查是否拥有指定的所有权限
     */
    private boolean checkPermissionAllGranted(String[] permissions) {
        for (String permission : permissions) {
            if (ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {
                // 只要有一个权限没有被授予, 则直接返回 false
                //Log.e("err","权限"+permission+"没有授权");
                return false;
            }
        }
        return true;
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {

        if (requestCode == 1) {
            boolean isAllGranted = true;
            // 判断是否所有的权限都已经授予了
            for (int grant : grantResults) {
                if (grant != PackageManager.PERMISSION_GRANTED) {
                    isAllGranted = false;
                    break;
                }
            }
            if (isAllGranted) {
                // 所有的权限都授予了
            } else {
                // 弹出对话框告诉用户需要权限的原因, 并引导用户去应用权限管理中手动打开权限按钮
                //容易判断错
                //MyDialog("提示", "某些权限未开启,请手动开启", 1) ;
            }
        }
    }

    class RecordThread extends Thread {
        @Override
        public void run() {
            Log.d(TAG, "run: -----");
            isRecording=true;

            //采集的音频缓冲区
            byte[] buffer = new byte[recBufSize];
            //开始采集
            mAudioRecord.startRecording();
            //采集的同时播放
            mAudioTrack.play();

            while (isRecording) {
                //从音频缓冲区取出声音数据
                int bufferReadResult = mAudioRecord.read(buffer, 0, recBufSize);
                //播放音频缓冲区
                byte[] tempBuffer = new byte[bufferReadResult];

                //把音频数据拷贝到播放缓冲区
                System.arraycopy(buffer, 0, tempBuffer, 0, bufferReadResult);
                //播放声音
                mAudioTrack.write(tempBuffer, 0, tempBuffer.length);

            }
            //结束播放和采集
            mAudioTrack.stop();
            mAudioRecord.stop();
        }
    }

}
